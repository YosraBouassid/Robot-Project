# -*- coding: utf-8 -*-
"""comparaison de 2noeuds edge.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Quz93gwhpzDblVugsdO5QxR5jp2g45-Q
"""

#3.6.9 ne marche pas
#il faut version 3.8.2 python
# -*- coding: utf-8 -*

import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.ar_model import AR
from sklearn.metrics import mean_squared_error

import pandas as pd
la = pd.read_csv('latences.csv',index_col=0 )
latence= la.values[:,0]
latencecloud= la.values[:,1]
train =latence[0:31] # 31 data as train data
test = latence[31:]  # 20 data as test data
trainlist = train.tolist()
testlist = test.tolist()
dataset=trainlist+testlist



#  ****************************************************fenetre fixe***************************************************
#_______________calcul de valeurs prédites  de fenetre fixe____________________
i=len(dataset)-len(testlist)
print(i)
predictions=[]
predict=list()
while(i < len(dataset)): 
  model_ar = AR(trainlist)
  model_ar_fit = model_ar.fit()
  predict = model_ar_fit.predict(end =i)
  predict= predict.tolist()
  print(predict[-1],i)
  predictions.append(predict[-1])
  i += 1
print(predictions)  


#***************************fennetre glissante **********************************************************************
#__________________calcul des valeurs predites de fenetre glissante___________
i=len(trainlist)
predict=list()
while(i < len(dataset)): #prédire une seule valeur ou prédire une infinité de valeurs lors du parcours de la voiture
  model_ar = AR(trainlist)
  model_ar_fit = model_ar.fit()
  predict_onevalue = model_ar_fit.predict(start=i,end=i)
  predict_onevaluelist= predict_onevalue.tolist()
  predict.append(predict_onevaluelist)
  trainlist.insert(i,dataset[i])
  i += 1
print(predict)




#***************************************fenetre mixte ****************************************************
#fenetre Mixte_______________________________________________________________________________fenetre mixte
#__________________________calcul de predictMixt____________________________________________________________

la = pd.read_csv('latences.csv',index_col=0 )
latence= la.values[:,0]
latencecloud= la.values[:,1]
train =latence[0:31] # 31 data as train data
test = latence[31:]  # 20 data as test data
trainlist = train.tolist()
testlist = test.tolist()
dataset=trainlist+testlist

import numpy as np
i=len(trainlist)
predictmixt=list()
while(i < len(dataset)): 
  model_ar1 = AR(trainlist)
  model_ar_fit = model_ar1.fit()
  predict_onevalue = model_ar_fit.predict(end=i)
  predict_onevaluelist= predict_onevalue.tolist()
  print(predict_onevaluelist[-1],i)
  if(np.asarray(predict_onevaluelist[-1]) not in [np.asarray(dataset[i])- (0.01),np.asarray(dataset[i])+ (0.01)]):
    trainlist.insert(i,dataset[i])
  predictmixt.append(predict_onevaluelist[-1])
  i += 1
print(predictmixt)  

#***********************************Comparaison entre fenetre fixe glissante mixte dans edge node********************************************

#*************************************************************************************************
#*************************************************************************************************
#**************************second noeud*******************second noeud****************************
#*************************************************************************************************
#*************************************************************************************************

#  ****************************************************fenetre fixe***************************************************
import pandas as pd
la = pd.read_csv('latences.csv',index_col=0 )

latence2= la.values[:,1]
train2 =latence2[0:31] # 31 data as train data
test2 = latence2[31:]  # 20 data as test data
trainlist2 = train2.tolist()
testlist2 = test2.tolist()
dataset2=trainlist2+testlist2



#_______________calcul de valeurs prédites  de fenetre fixe____________________
i=len(dataset2)-len(testlist2)
print(i)
predictions2=[]
predict2=list()
while(i < len(dataset2)): 
  model_ar = AR(trainlist2)
  model_ar_fit = model_ar.fit()
  predict2 = model_ar_fit.predict(end =i)
  predict2= predict2.tolist()
  print(predict2[-1],i)
  predictions2.append(predict2[-1])
  i += 1
print(predictions2)  


#***************************fennetre glissante **********************************************************************
#__________________calcul des valeurs predites de fenetre glissante___________
i=len(trainlist2)
predict2=list()
while(i < len(dataset2)): #prédire une seule valeur ou prédire une infinité de valeurs lors du parcours de la voiture
  model_ar = AR(trainlist2)
  model_ar_fit = model_ar.fit()
  predict_onevalue = model_ar_fit.predict(start=i,end=i)
  predict_onevaluelist= predict_onevalue.tolist()
  predict2.append(predict_onevaluelist)
  trainlist2.insert(i,dataset2[i])
  i += 1
print(predict2)




#***************************************fenetre mixte ****************************************************
#fenetre Mixte_______________________________________________________________________________fenetre mixte
#__________________________calcul de predictMixt____________________________________________________________

la = pd.read_csv('latences.csv',index_col=0 )
latence= la.values[:,0]
latence2= la.values[:,1]
train2 =latence2[0:31] # 31 data as train data
test2 = latence2[31:]  # 20 data as test data
trainlist2 = train2.tolist()
testlist2 = test2.tolist()
dataset2=trainlist2+testlist2

import numpy as np
i=len(trainlist2)
predictmixt2=list()
while(i < len(dataset2)): 
  model_ar1 = AR(trainlist2)
  model_ar_fit = model_ar1.fit()
  predict_onevalue = model_ar_fit.predict(end=i)
  predict_onevaluelist= predict_onevalue.tolist()
  print(predict_onevaluelist[-1],i)
  if(np.asarray(predict_onevaluelist[-1]) not in [np.asarray(dataset2[i])- (0.01),np.asarray(dataset2[i])+ (0.01)]):
    trainlist2.insert(i,dataset2[i])
  predictmixt2.append(predict_onevaluelist[-1])
  i += 1
print(predictmixt2)  

#***********************************Comparaison entre fenetre fixe glissante mixte dans edge node2********************************************
#__________________________fenetre fixe second noeud_________________________________________
from matplotlib import pyplot as plt
#__________________________fenetre fixe edge node_________________________________________
from matplotlib import pyplot as plt
figure, ax = plt.subplots(figsize=(50,5))#3lig ,1col,pos1(3,1,1)
xdataset = [i for i in range(0,1*(len(dataset)),1)]
xpredict = [i for i in range(1*(len(train)),1*(len(dataset)),1)]
import numpy as np
maxa = np.asarray(dataset[dataset.index(max(dataset))])
valeurMax=maxa+0.02
import numpy as np
mina = np.asarray(dataset[dataset.index(min(dataset))])
valeurMin=mina- 0.02
xdataset2 = [i for i in range(0,1*(len(dataset2)),1)]
xpredict2 = [i for i in range(1*(len(train2)),1*(len(dataset2)),1)]
import numpy as np
maxa = np.asarray(dataset2[dataset2.index(max(dataset2))])
valeurMax2=maxa+0.02
if(valeurMax < valeurMax2):
  valeurMax=valeurMax2
import numpy as np
mina = np.asarray(dataset2[dataset2.index(min(dataset2))])
valeurMin2=mina- 0.02
if(valeurMin < valeurMin2):
  valeurMin2=valeurMin
if(min(xdataset)<min(xdataset2)):
  a=min(dataset)
else:
  a=min(dataset2)
if(max(xdataset)> max(xdataset2)):
  bb=max(dataset)
else:
  bb=max(dataset2)
plt.grid(True)
plt.plot(xdataset,dataset, "b", linewidth=0.8, marker="*", label="Dataset For Raspberry Pi 2")
plt.plot(xpredict,predictions, "g", linewidth=0.8, marker="+", label="Predicted values For Raspberry Pi 2")
plt.plot(xdataset2,dataset2, "r", linewidth=0.8, marker="*", label="Dataset For Raspberry Pi 3")
plt.plot(xpredict2,predictions2, "m", linewidth=0.8, marker="+", label="Predicted values For Raspberry Pi 3")
plt.axis()
plt.xlabel('Time')
plt.ylabel('Latency')
plt.title("Fixed Window For two Raspberry Pi ")
plt.legend()  

#__________________________fenetre glissante edge node__________________________________________

from matplotlib import pyplot as plt
figure, ax = plt.subplots(figsize=(50,5))#3lig ,1col,pos1(3,1,1)
xdataset = [i for i in range(0,1*(len(dataset)),1)]
xpredict = [i for i in range(1*(len(train)),1*(len(dataset)),1)]
import numpy as np
maxa = np.asarray(dataset[dataset.index(max(dataset))])
valeurMax=maxa+0.02
import numpy as np
mina = np.asarray(dataset[dataset.index(min(dataset))])
valeurMin=mina- 0.02
xdataset2 = [i for i in range(0,1*(len(dataset2)),1)]
xpredict2 = [i for i in range(1*(len(train2)),1*(len(dataset2)),1)]
import numpy as np
maxa = np.asarray(dataset2[dataset2.index(max(dataset2))])
valeurMax2=maxa+0.02
if(valeurMax < valeurMax2):
  maxx=valeurMax2
else:
  maxx = valeurMax
print(maxx)
import numpy as np
mina = np.asarray(dataset2[dataset2.index(min(dataset2))])
valeurMin2=mina- 0.02
if(valeurMin < valeurMin2):
  minn=valeurMin
else:
  minn = valeurMin2
print(minn)
if(min(xdataset)<min(xdataset2)):
  a=min(xdataset)
else:
  a=min(xdataset2)
print(a)
if(max(xdataset)> max(xdataset2)):
  bb=max(xdataset)
else:
  bb=max(xdataset2)
print(bb)

#*************************************
for ii1,jj1,ii2,jj2 in zip(xdataset,dataset,xdataset2,dataset2):
  for  ii, jj in zip( xpredict2, predict2):

    if (ii2 == ii):

      plt.scatter(ii2, jj2, color="r", marker="*", s=80)
      plt.scatter(ii, jj, color="m", marker="+", s=80)
      plt.pause(0.5)

    else:
      if (ii2 < ii):
         plt.scatter(ii2,jj2, color="r",marker ="*",s=80)
  for  ii, jj in zip( xpredict, predict):

    if (ii1 == ii):

      plt.scatter(ii1, jj1, color="b", marker="+", s=80)
      plt.scatter(ii, jj, color="g", marker="*", s=80)
      plt.pause(0.5)

    else:
      if (ii1 < ii):
         plt.scatter(ii1,jj1, color="b",marker ="+",s=80)

#****************************************
plt.grid(True)
plt.plot(xdataset,dataset, "b", linewidth=0.8, marker="*", label="Dataset For Raspberry Pi 2")
plt.plot(xpredict,predict, "g", linewidth=0.8, marker="+", label="Predicted values For Raspberry Pi 2")
plt.plot(xdataset2,dataset2, "r", linewidth=0.8, marker="*", label="Dataset For Raspberry Pi 3")
plt.plot(xpredict2,predict2, "m", linewidth=0.8, marker="+", label="Predicted values For Raspberry Pi 3")

plt.axis()

plt.xlabel('Time')
plt.ylabel('Latency')
plt.title("Sliding Window For two Raspberry Pi")
plt.legend()









# ___________________________fenetre mixte edge node _______________________________________





from matplotlib import pyplot as plt
figure, ax = plt.subplots(figsize=(50,5))#3lig ,1col,pos1(3,1,1)
xdataset = [i for i in range(0,1*(len(dataset)),1)]
xpredict = [i for i in range(1*(len(train)),1*(len(dataset)),1)]
import numpy as np
maxa = np.asarray(dataset[dataset.index(max(dataset))])
valeurMax=maxa+0.02
import numpy as np
mina = np.asarray(dataset[dataset.index(min(dataset))])
valeurMin=mina- 0.02
xdataset2 = [i for i in range(0,1*(len(dataset2)),1)]
xpredict2 = [i for i in range(1*(len(train2)),1*(len(dataset2)),1)]
import numpy as np
maxa = np.asarray(dataset2[dataset2.index(max(dataset2))])
valeurMax2=maxa+0.02
if(valeurMax < valeurMax2):
  valeurMax=valeurMax2
import numpy as np
mina = np.asarray(dataset2[dataset2.index(min(dataset2))])
valeurMin2=mina- 0.02
if(valeurMin < valeurMin2):
  valeurMin2=valeurMin
if(min(xdataset)<min(xdataset2)):
  a=min(dataset)
else:
  a=min(dataset2)
if(max(xdataset)> max(xdataset2)):
  bb=max(dataset)
else:
  bb=max(dataset2)
plt.grid(True)
plt.plot(xdataset,dataset, "b", linewidth=0.8, marker="*", label="Dataset For Raspberry Pi 2")
plt.plot(xpredict,predictmixt, "g", linewidth=0.8, marker="+", label="Predicted values For Raspberry Pi 2")
plt.plot(xdataset2,dataset2, "r", linewidth=0.8, marker="*", label="Dataset For Raspberry Pi 3")
plt.plot(xpredict2,predictmixt2, "m", linewidth=0.8, marker="+", label="Predicted values For Raspberry Pi 3")
plt.axis()
plt.xlabel('Time')
plt.ylabel('Latency')
plt.title("Mixed Window For two Raspberry Pi")
plt.legend()


#**********************************************************
plt.show()

